State fringe(State & state) {
	std::deque<State> fringe;
	fringe.push_back(state);
	int flimit = state.heuristic();
	bool found = 0;
	std::map<State, std::pair<int, State*>> cache;
	cache.emplace(state, std::pair<int, State*>(0, state.parent));
	State result;
	//std::deque<State>::iterator it;
	while (!found && !fringe.empty()) {
		int fmin = INT_MAX;
		State s = fringe.front();
		int g = s.g;
		int f = g + s.heuristic();
		if (f > flimit) { 
			fmin = std::min(f, fmin); 
			continue;
		}
		if (s.isFinal()) {
			result = s;
			found = true;
			break;
		}
		State child;
		for (int i = 0; i < 4; ++i) {
			if (s.canMove((Move)i)) {
				int index = -1;
				if ((Move)i == Up || (Move)i == Down) index = 4;
				for (index; index < 5; ++index) {
					child = s.makeMove((Move)i, index);
					int g_child = child.g = 1 + g;
					if (cache.find(child) != cache.end()) {
						int g_cached = cache[child].first;
						if (g_child >= g_cached) continue;
					}
					auto it = std::find(fringe.begin(), fringe.end(), child);
					if (it != fringe.end())
						fringe.erase(it);
					fringe.push_back(child);
					cache[child].first = g_child;
					cache[child].second = new State(s);
				}
			}
		}
			/*auto it = std::find(fringe.begin(), fringe.end(), s);
			if (it != fringe.end())
				fringe.erase(it);*/
		fringe.pop_front();
		flimit = fmin;
	}
	return result;
}